// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommunityService_CreateCommunity_FullMethodName  = "/community.CommunityService/CreateCommunity"
	CommunityService_DeleteCommunity_FullMethodName  = "/community.CommunityService/DeleteCommunity"
	CommunityService_UpdateImage_FullMethodName      = "/community.CommunityService/UpdateImage"
	CommunityService_UpdateBackground_FullMethodName = "/community.CommunityService/UpdateBackground"
	CommunityService_UpdateDesc_FullMethodName       = "/community.CommunityService/UpdateDesc"
)

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServiceClient interface {
	CreateCommunity(ctx context.Context, in *CreateCommunityInput, opts ...grpc.CallOption) (*Community, error)
	DeleteCommunity(ctx context.Context, in *CommunityIdInput, opts ...grpc.CallOption) (*ImageIdResp, error)
	UpdateImage(ctx context.Context, in *UpdateImgInput, opts ...grpc.CallOption) (*Community, error)
	UpdateBackground(ctx context.Context, in *UpdateImgInput, opts ...grpc.CallOption) (*Community, error)
	UpdateDesc(ctx context.Context, in *TextInput, opts ...grpc.CallOption) (*Community, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityInput, opts ...grpc.CallOption) (*Community, error) {
	out := new(Community)
	err := c.cc.Invoke(ctx, CommunityService_CreateCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) DeleteCommunity(ctx context.Context, in *CommunityIdInput, opts ...grpc.CallOption) (*ImageIdResp, error) {
	out := new(ImageIdResp)
	err := c.cc.Invoke(ctx, CommunityService_DeleteCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateImage(ctx context.Context, in *UpdateImgInput, opts ...grpc.CallOption) (*Community, error) {
	out := new(Community)
	err := c.cc.Invoke(ctx, CommunityService_UpdateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateBackground(ctx context.Context, in *UpdateImgInput, opts ...grpc.CallOption) (*Community, error) {
	out := new(Community)
	err := c.cc.Invoke(ctx, CommunityService_UpdateBackground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateDesc(ctx context.Context, in *TextInput, opts ...grpc.CallOption) (*Community, error) {
	out := new(Community)
	err := c.cc.Invoke(ctx, CommunityService_UpdateDesc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility
type CommunityServiceServer interface {
	CreateCommunity(context.Context, *CreateCommunityInput) (*Community, error)
	DeleteCommunity(context.Context, *CommunityIdInput) (*ImageIdResp, error)
	UpdateImage(context.Context, *UpdateImgInput) (*Community, error)
	UpdateBackground(context.Context, *UpdateImgInput) (*Community, error)
	UpdateDesc(context.Context, *TextInput) (*Community, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServiceServer struct {
}

func (UnimplementedCommunityServiceServer) CreateCommunity(context.Context, *CreateCommunityInput) (*Community, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) DeleteCommunity(context.Context, *CommunityIdInput) (*ImageIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateImage(context.Context, *UpdateImgInput) (*Community, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateBackground(context.Context, *UpdateImgInput) (*Community, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackground not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateDesc(context.Context, *TextInput) (*Community, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDesc not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, req.(*CreateCommunityInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_DeleteCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_DeleteCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, req.(*CommunityIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImgInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateImage(ctx, req.(*UpdateImgInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImgInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateBackground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateBackground(ctx, req.(*UpdateImgInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateDesc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateDesc(ctx, req.(*TextInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityService_CreateCommunity_Handler,
		},
		{
			MethodName: "DeleteCommunity",
			Handler:    _CommunityService_DeleteCommunity_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _CommunityService_UpdateImage_Handler,
		},
		{
			MethodName: "UpdateBackground",
			Handler:    _CommunityService_UpdateBackground_Handler,
		},
		{
			MethodName: "UpdateDesc",
			Handler:    _CommunityService_UpdateDesc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "community.proto",
}
